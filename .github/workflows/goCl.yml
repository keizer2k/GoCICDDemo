name: CI setup for Go #name the workflow
on: #on event keyword
  push: 
    branches: [main] #identifying branch
    
jobs: # Job to execute on event
  my-job:
    name: My Job
    runs-on: ubuntu-latest # specify OS in virtual machine
    steps:
       - name: Print a greeting
         run: |
          ls
          echo Hello there! # run terminal command
    
       - name: Setup Go environment
         uses: actions/setup-go@v2.1.3
         with:
          # The Go version to download (if necessary) and use. Supports semver spec and ranges.
          go-version: 1.13.7 # optional
       - name: show Go version # verufy that go is installed
         run : go version #show go version

       - name: Checkout our codes # bring repo code to virtual environment
         uses: actions/checkout@v2
         
       - name: Check file system #check virtual environment has my files
         run: |
          ls
          cat calc.go #print the content of calc.go
      
       - name: Checkout private repo remotely
         uses: actions/checkout@v2
         with:
          repository: lowkh2/GoSchoolRemoteExample # the hidden repo i am trying to access
          path: virtualRepoFolder #Folder to save to in my virtual env
          token: ${{ secrets.GO_SECRET }} #Pass to enter remote hidden repo
          
       - name: Show hidden files
         run: |
          cd virtualRepoFolder # to access the folder of interest in my virtual env
          ls
          cat myText.txt #show content of file of interest
          cd ..
      
       - name: Install dependencies for GO
         run: |
          go get github.com/franela/goblin #Adds package for Goblin testing
          go get github.com/tebeka/go2xunit #Adds package for conversion
          go test -v #command to run go test
          go test -v | go2xunit > report.xml # run test again and output as report.xml (to show the effect)
          ls # verify that report indeed created

       - name: Publish Unit Test Result
         uses: EnricoMi/publish-unit-test-result-action@v1 # checkout unit test reporting
         if: always() #always do it
         with:
          files: report.xml #make use of a file we created
          
       - if: ${{ failure() }}
         name: Create Issues Notifications
         uses: nashmaniac/create-issue-action@v1.1
         with: 
          title: Builed Failed
          token: ${{secrets.GITHUB_TOKEN}}
          assignees: ${{github.actor}}
          labels: workflow-failed
          body: Workflow failed for commit ${{github.sha}}
